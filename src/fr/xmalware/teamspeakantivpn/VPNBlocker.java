package fr.xmalware.teamspeakantivpn;

import java.lang.reflect.Type;
import java.util.TreeMap;
import java.util.UUID;

import com.github.theholywaffle.teamspeak3.TS3Api;
import com.github.theholywaffle.teamspeak3.api.wrapper.Client;
import com.github.theholywaffle.teamspeak3.api.wrapper.ServerGroup;
import com.google.gson.reflect.TypeToken;

import fr.xmalware.teamspeakantivpn.objects.AntiVPNConfig;
import fr.xmalware.teamspeakantivpn.objects.IPDetectorObject;
import fr.xmalware.teamspeakantivpn.utils.NetworkUtils;

public class VPNBlocker
{

	public static final Type collectionType = new TypeToken<TreeMap<String, Boolean>>() {}.getType();

	public static void checkEveryone()
	{
		Main.getTeamSpeak().getApi().getClients().forEach(client -> check(client, client.getDatabaseId()));
	}

	public static void check(int clientId, int clientDatabaseId)
	{
		check(Main.getTeamSpeak().getApi().getClientInfo(clientId), clientDatabaseId);
	}

	public static void check(Client client, int clientDatabaseId)
	{
		TS3Api api = Main.getTeamSpeak().getApi();
		for (ServerGroup serverGroup : api.getServerGroupsByClient(client))
		{
			long count = api.getServerGroupPermissions(serverGroup).stream().filter(permission -> permission.getName().equals("b_client_ignore_antiflood") && permission.getValue() == 1).count();
			if (count > 0)
			{
				// Bypass
				System.out.println("Login [" + client.getNickname() + "] Bypass");
				return;
			}
		}
		
		new Thread("check-vpnblocker-" + clientDatabaseId + "-" + UUID.randomUUID().toString())
		{
			@Override
			public void run()
			{
				String lastIp = client.getIp();
				String urlBuilder = "https://api.ipdetector.info/" + lastIp;
				String apiKey = Main.getTeamSpeak().getConfiguration().getIpDetectorApiKey();
				String sourceCode = NetworkUtils.fetchSourceCodeWithIPDetector(urlBuilder, apiKey);

				IPDetectorObject object = Main.getTeamSpeak().getGson().fromJson(sourceCode, IPDetectorObject.class);

				if (object == null || object.getIp() == null || (object.getError() != null && !object.getError().isEmpty()))
				{
					System.out.println("Login [" + client.getNickname() + "] Unable to check the client connection.");
					System.out.println("Error: " + sourceCode);
					return;
				}
				
				String action = object.getGoodIp() == 0 ? "Bad IP. He will banned." : "Good IP.";
				System.out.println("Login [" + client.getNickname() + "] " + action);

				if (object.getGoodIp() == 0)
				{
					ban(client.getId(), lastIp);
				}
			}
		}.start();
	}

	public static void ban(int clientId, String lastIp)
	{
		TeamSpeak teamspeak = Main.getTeamSpeak();
		TS3Api api = teamspeak.getApi();
		AntiVPNConfig configuration = teamspeak.getConfiguration();
		
		if (configuration.isBanIdentity())
		{
			api.banClient(clientId, configuration.getBanReason());
		}
		
		if (configuration.isBanIp())
		{
			api.addBan(lastIp, null, null, 0, configuration.getBanReason());
		}
	}

}